// Code generated by scale_codec/enum_script. DO NOT EDIT.
package main

import (
	"bytes"
	"fmt"
	"io"

	scale_codec "github.com/crypto2lab/scale-codec"
)

type T2[A scale_codec.Marshaler,B scale_codec.Marshaler] struct {
	F0 A
	F1 B
}

func (t *T2[A,B]) MarshalSCALE() (output []byte, err error) {
	output = make([]byte, 0)
	var enc []byte
	
	enc, err = t.F0.MarshalSCALE()
	if err != nil {
		return nil, err
	}
	output = append(output, enc...)
	
	enc, err = t.F1.MarshalSCALE()
	if err != nil {
		return nil, err
	}
	output = append(output, enc...)
	
	return output, nil
}

func (t *T2[A,B]) UnmarshalSCALE(reader io.Reader, funcA func (io.Reader) (A, error),funcB func (io.Reader) (B, error)) (err error) {
	
	t.F0, err =  funcA(reader)
	if err != nil {
		return err
	}
	
	t.F1, err =  funcB(reader)
	if err != nil {
		return err
	}
	
	return nil
}

func UnmarshalT2FromRawBytes[A scale_codec.Marshaler,B scale_codec.Marshaler](
	funcA func (io.Reader) (A, error),funcB func (io.Reader) (B, error)) func(io.Reader) (*T2[A,B], error) {
	return func(reader io.Reader) (*T2[A,B], error) {
		tuple := new(T2[A,B])
		err := tuple.UnmarshalSCALE(reader,
			funcA,
			funcB,)
		
		if err != nil {
			return nil, err
		}
		return tuple, nil
	}
}
type T3[A scale_codec.Marshaler,B scale_codec.Marshaler,C scale_codec.Marshaler] struct {
	F0 A
	F1 B
	F2 C
}

func (t *T3[A,B,C]) MarshalSCALE() (output []byte, err error) {
	output = make([]byte, 0)
	var enc []byte
	
	enc, err = t.F0.MarshalSCALE()
	if err != nil {
		return nil, err
	}
	output = append(output, enc...)
	
	enc, err = t.F1.MarshalSCALE()
	if err != nil {
		return nil, err
	}
	output = append(output, enc...)
	
	enc, err = t.F2.MarshalSCALE()
	if err != nil {
		return nil, err
	}
	output = append(output, enc...)
	
	return output, nil
}

func (t *T3[A,B,C]) UnmarshalSCALE(reader io.Reader, funcA func (io.Reader) (A, error),funcB func (io.Reader) (B, error),funcC func (io.Reader) (C, error)) (err error) {
	
	t.F0, err =  funcA(reader)
	if err != nil {
		return err
	}
	
	t.F1, err =  funcB(reader)
	if err != nil {
		return err
	}
	
	t.F2, err =  funcC(reader)
	if err != nil {
		return err
	}
	
	return nil
}

func UnmarshalT3FromRawBytes[A scale_codec.Marshaler,B scale_codec.Marshaler,C scale_codec.Marshaler](
	funcA func (io.Reader) (A, error),funcB func (io.Reader) (B, error),funcC func (io.Reader) (C, error)) func(io.Reader) (*T3[A,B,C], error) {
	return func(reader io.Reader) (*T3[A,B,C], error) {
		tuple := new(T3[A,B,C])
		err := tuple.UnmarshalSCALE(reader,
			funcA,
			funcB,
			funcC,)
		
		if err != nil {
			return nil, err
		}
		return tuple, nil
	}
}


type Nested interface {
	scale_codec.Encodable
	IsNested()
}

func UnmarshalNested(reader io.Reader) (Nested, error) {
	enumTag := make([]byte, 1)
	n, err := reader.Read(enumTag)
	if err != nil {
		return nil, err
	}

	if n != 1 {
		return nil, fmt.Errorf("%w: got %v", scale_codec.ErrExpectedOneByteRead, n)
	}

	switch enumTag[0] {
	
	case NumberIndex:
		unmarshaler := NewNumber()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	default:
		return nil, fmt.Errorf("unexpected enum tag: %v", enumTag[0])
	}
}
type Error interface {
	scale_codec.Encodable
	IsError()
}

func UnmarshalError(reader io.Reader) (Error, error) {
	enumTag := make([]byte, 1)
	n, err := reader.Read(enumTag)
	if err != nil {
		return nil, err
	}

	if n != 1 {
		return nil, fmt.Errorf("%w: got %v", scale_codec.ErrExpectedOneByteRead, n)
	}

	switch enumTag[0] {
	
	case FailureXIndex:
		unmarshaler := NewFailureX()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	default:
		return nil, fmt.Errorf("unexpected enum tag: %v", enumTag[0])
	}
}
type MyScaleEncodedEnum interface {
	scale_codec.Encodable
	IsMyScaleEncodedEnum()
}

func UnmarshalMyScaleEncodedEnum(reader io.Reader) (MyScaleEncodedEnum, error) {
	enumTag := make([]byte, 1)
	n, err := reader.Read(enumTag)
	if err != nil {
		return nil, err
	}

	if n != 1 {
		return nil, fmt.Errorf("%w: got %v", scale_codec.ErrExpectedOneByteRead, n)
	}

	switch enumTag[0] {
	
	case SingleIndex:
		unmarshaler := NewSingle()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case IntIndex:
		unmarshaler := NewInt()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case BoolIndex:
		unmarshaler := NewBool()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case AIndex:
		unmarshaler := NewA()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case BIndex:
		unmarshaler := NewB()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case GIndex:
		unmarshaler := NewG()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case HIndex:
		unmarshaler := NewH()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case JIndex:
		unmarshaler := NewJ()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case KIndex:
		unmarshaler := NewK()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case LIndex:
		unmarshaler := NewL()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case MIndex:
		unmarshaler := NewM()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case NIndex:
		unmarshaler := NewN()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case OIndex:
		unmarshaler := NewO()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case PIndex:
		unmarshaler := NewP()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case QIndex:
		unmarshaler := NewQ()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	case RIndex:
		unmarshaler := NewR()
		err := unmarshaler.UnmarshalSCALE(reader)
		if err != nil {
			return nil, err
		}
		return unmarshaler, err
	
	default:
		return nil, fmt.Errorf("unexpected enum tag: %v", enumTag[0])
	}
}


var NumberIndex byte = 0

var _ Nested = (*Number)(nil)

type Number struct {
	Inner *scale_codec.Integer[uint32]
}

func NewNumber() *Number {
	return &Number{
		Inner: new(scale_codec.Integer[uint32]),
	}
}

func (Number) IsNested() {}

func (i Number) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := NumberIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *Number) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader)
}
var FailureXIndex byte = 0

var _ Error = (*FailureX)(nil)

type FailureX struct {
	Inner *scale_codec.SimpleVariant
}

func NewFailureX() *FailureX {
	return &FailureX{
		Inner: new(scale_codec.SimpleVariant),
	}
}

func (FailureX) IsError() {}

func (i FailureX) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := FailureXIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *FailureX) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader)
}
var SingleIndex byte = 0

var _ MyScaleEncodedEnum = (*Single)(nil)

type Single struct {
	Inner *scale_codec.SimpleVariant
}

func NewSingle() *Single {
	return &Single{
		Inner: new(scale_codec.SimpleVariant),
	}
}

func (Single) IsMyScaleEncodedEnum() {}

func (i Single) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := SingleIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *Single) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader)
}
var IntIndex byte = 1

var _ MyScaleEncodedEnum = (*Int)(nil)

type Int struct {
	Inner *scale_codec.Integer[uint64]
}

func NewInt() *Int {
	return &Int{
		Inner: new(scale_codec.Integer[uint64]),
	}
}

func (Int) IsMyScaleEncodedEnum() {}

func (i Int) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := IntIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *Int) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader)
}
var BoolIndex byte = 2

var _ MyScaleEncodedEnum = (*Bool)(nil)

type Bool struct {
	Inner *scale_codec.Bool
}

func NewBool() *Bool {
	return &Bool{
		Inner: new(scale_codec.Bool),
	}
}

func (Bool) IsMyScaleEncodedEnum() {}

func (i Bool) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := BoolIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *Bool) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader)
}
var AIndex byte = 3

var _ MyScaleEncodedEnum = (*A)(nil)

type A struct {
	Inner *scale_codec.OptionG[*scale_codec.Bool]
}

func NewA() *A {
	return &A{
		Inner: new(scale_codec.OptionG[*scale_codec.Bool]),
	}
}

func (A) IsMyScaleEncodedEnum() {}

func (i A) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := AIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *A) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader,scale_codec.BoolFromRawBytes)
}
var BIndex byte = 4

var _ MyScaleEncodedEnum = (*B)(nil)

type B struct {
	Inner *scale_codec.ResultG[*scale_codec.Integer[uint64],*scale_codec.Integer[uint64]]
}

func NewB() *B {
	return &B{
		Inner: new(scale_codec.ResultG[*scale_codec.Integer[uint64],*scale_codec.Integer[uint64]]),
	}
}

func (B) IsMyScaleEncodedEnum() {}

func (i B) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := BIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *B) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader, scale_codec.IntegerFromRawBytes[uint64], scale_codec.IntegerFromRawBytes[uint64])
}
var GIndex byte = 5

var _ MyScaleEncodedEnum = (*G)(nil)

type G struct {
	Inner *T2[*scale_codec.Integer[uint64],*scale_codec.Bool]
}

func NewG() *G {
	return &G{
		Inner: new(T2[*scale_codec.Integer[uint64],*scale_codec.Bool]),
	}
}

func (G) IsMyScaleEncodedEnum() {}

func (i G) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := GIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *G) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader,scale_codec.IntegerFromRawBytes[uint64],scale_codec.BoolFromRawBytes)
}
var HIndex byte = 6

var _ MyScaleEncodedEnum = (*H)(nil)

type H struct {
	Inner *scale_codec.OptionG[*T2[*scale_codec.Integer[uint64],*scale_codec.Bool]]
}

func NewH() *H {
	return &H{
		Inner: new(scale_codec.OptionG[*T2[*scale_codec.Integer[uint64],*scale_codec.Bool]]),
	}
}

func (H) IsMyScaleEncodedEnum() {}

func (i H) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := HIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *H) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader,UnmarshalT2FromRawBytes[*scale_codec.Integer[uint64],*scale_codec.Bool](scale_codec.IntegerFromRawBytes[uint64],scale_codec.BoolFromRawBytes))
}
var JIndex byte = 7

var _ MyScaleEncodedEnum = (*J)(nil)

type J struct {
	Inner *scale_codec.ResultG[*T2[*scale_codec.Integer[uint64],*scale_codec.Bool],*scale_codec.Bool]
}

func NewJ() *J {
	return &J{
		Inner: new(scale_codec.ResultG[*T2[*scale_codec.Integer[uint64],*scale_codec.Bool],*scale_codec.Bool]),
	}
}

func (J) IsMyScaleEncodedEnum() {}

func (i J) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := JIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *J) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader, UnmarshalT2FromRawBytes[*scale_codec.Integer[uint64],*scale_codec.Bool](scale_codec.IntegerFromRawBytes[uint64],scale_codec.BoolFromRawBytes), scale_codec.BoolFromRawBytes)
}
var KIndex byte = 8

var _ MyScaleEncodedEnum = (*K)(nil)

type K struct {
	Inner *T2[*scale_codec.OptionG[*scale_codec.Bool],*scale_codec.ResultG[*scale_codec.Bool,*scale_codec.Bool]]
}

func NewK() *K {
	return &K{
		Inner: new(T2[*scale_codec.OptionG[*scale_codec.Bool],*scale_codec.ResultG[*scale_codec.Bool,*scale_codec.Bool]]),
	}
}

func (K) IsMyScaleEncodedEnum() {}

func (i K) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := KIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *K) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader,scale_codec.UnmarshalOptionFromRawBytes[*scale_codec.Bool](scale_codec.BoolFromRawBytes),scale_codec.UnmarshalResultFromRawBytes[*scale_codec.Bool,*scale_codec.Bool](scale_codec.BoolFromRawBytes,scale_codec.BoolFromRawBytes))
}
var LIndex byte = 9

var _ MyScaleEncodedEnum = (*L)(nil)

type L struct {
	Inner *scale_codec.ResultG[*scale_codec.OptionG[*T2[*scale_codec.Integer[uint64],*scale_codec.Bool]],*scale_codec.Integer[uint64]]
}

func NewL() *L {
	return &L{
		Inner: new(scale_codec.ResultG[*scale_codec.OptionG[*T2[*scale_codec.Integer[uint64],*scale_codec.Bool]],*scale_codec.Integer[uint64]]),
	}
}

func (L) IsMyScaleEncodedEnum() {}

func (i L) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := LIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *L) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader, scale_codec.UnmarshalOptionFromRawBytes[*T2[*scale_codec.Integer[uint64],*scale_codec.Bool]](UnmarshalT2FromRawBytes[*scale_codec.Integer[uint64],*scale_codec.Bool](scale_codec.IntegerFromRawBytes[uint64],scale_codec.BoolFromRawBytes)), scale_codec.IntegerFromRawBytes[uint64])
}
var MIndex byte = 10

var _ MyScaleEncodedEnum = (*M)(nil)

type M struct {
	Inner *scale_codec.OptionG[Nested]
}

func NewM() *M {
	return &M{
		Inner: new(scale_codec.OptionG[Nested]),
	}
}

func (M) IsMyScaleEncodedEnum() {}

func (i M) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := MIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *M) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader, UnmarshalNested)
}
var NIndex byte = 11

var _ MyScaleEncodedEnum = (*N)(nil)

type N struct {
	Inner *scale_codec.ResultG[Nested,*scale_codec.Bool]
}

func NewN() *N {
	return &N{
		Inner: new(scale_codec.ResultG[Nested,*scale_codec.Bool]),
	}
}

func (N) IsMyScaleEncodedEnum() {}

func (i N) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := NIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *N) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader, UnmarshalNested, scale_codec.BoolFromRawBytes)
}
var OIndex byte = 12

var _ MyScaleEncodedEnum = (*O)(nil)

type O struct {
	Inner *scale_codec.ResultG[*scale_codec.Bool,Nested]
}

func NewO() *O {
	return &O{
		Inner: new(scale_codec.ResultG[*scale_codec.Bool,Nested]),
	}
}

func (O) IsMyScaleEncodedEnum() {}

func (i O) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := OIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *O) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader, scale_codec.BoolFromRawBytes, UnmarshalNested)
}
var PIndex byte = 13

var _ MyScaleEncodedEnum = (*P)(nil)

type P struct {
	Inner *scale_codec.ResultG[Nested,Error]
}

func NewP() *P {
	return &P{
		Inner: new(scale_codec.ResultG[Nested,Error]),
	}
}

func (P) IsMyScaleEncodedEnum() {}

func (i P) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := PIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *P) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader, UnmarshalNested, UnmarshalError)
}
var QIndex byte = 14

var _ MyScaleEncodedEnum = (*Q)(nil)

type Q struct {
	Inner *T3[Nested,*scale_codec.Integer[uint64],Error]
}

func NewQ() *Q {
	return &Q{
		Inner: new(T3[Nested,*scale_codec.Integer[uint64],Error]),
	}
}

func (Q) IsMyScaleEncodedEnum() {}

func (i Q) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := QIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *Q) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader,UnmarshalNested,scale_codec.IntegerFromRawBytes[uint64],UnmarshalError)
}
var RIndex byte = 15

var _ MyScaleEncodedEnum = (*R)(nil)

type R struct {
	Inner *T3[*scale_codec.ResultG[*scale_codec.Integer[uint64],*scale_codec.Bool],*scale_codec.OptionG[*scale_codec.Integer[uint64]],Error]
}

func NewR() *R {
	return &R{
		Inner: new(T3[*scale_codec.ResultG[*scale_codec.Integer[uint64],*scale_codec.Bool],*scale_codec.OptionG[*scale_codec.Integer[uint64]],Error]),
	}
}

func (R) IsMyScaleEncodedEnum() {}

func (i R) MarshalSCALE() ([]byte, error) {
	innerEncode, err := i.Inner.MarshalSCALE()
	if err != nil {
		return nil, err
	}

	idx := RIndex
	return bytes.Join([][]byte{[]byte{idx}, innerEncode}, nil), nil
}

func (i *R) UnmarshalSCALE(reader io.Reader) error {
	return i.Inner.UnmarshalSCALE(reader,scale_codec.UnmarshalResultFromRawBytes[*scale_codec.Integer[uint64],*scale_codec.Bool](scale_codec.IntegerFromRawBytes[uint64],scale_codec.BoolFromRawBytes),scale_codec.UnmarshalOptionFromRawBytes[*scale_codec.Integer[uint64]](scale_codec.IntegerFromRawBytes[uint64]),UnmarshalError)
}
